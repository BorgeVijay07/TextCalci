{"version":3,"sources":["Components/Navbar.js","Components/TextField.js","Components/Alert.js","Components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","aboutname","onClick","toggleMode","style","height","width","htmlFor","TextField","useState","text","setText","color","heading","backgroundColor","rows","value","onChange","event","target","disabled","length","newText","toUpperCase","showAlert","toLowerCase","split","join","navigator","clipboard","writeText","filter","element","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","defaultProps","About","myStyle","border","App","setMode","removeBodyClasses","document","body","classList","remove","setAlert","message","setTimeout","cls","add","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.27cc9ccf.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n            <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/about\">{props.aboutname}</Link>\r\n                    </li>\r\n                    </ul>\r\n                    <div className=\"d-flex\">\r\n                        <div className=\"bg-primary rounded mx-3\" onClick={()=>{props.toggleMode('primary')}} style={{height: '20px', width: '20px'}}></div>\r\n                        <div className=\"bg-danger rounded mx-3\" onClick={()=>{props.toggleMode('danger')}} style={{height: '20px', width: '20px'}}></div>\r\n                        <div className=\"bg-success rounded mx-3\" onClick={()=>{props.toggleMode('success')}} style={{height: '20px', width: '20px'}}></div>\r\n                        <div className=\"bg-warning rounded mx-3\" onClick={()=>{props.toggleMode('warning')}} style={{height: '20px', width: '20px'}}></div>\r\n                    </div>\r\n                    {/* <form className=\"d-flex\">\r\n                    <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n                    <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n\r\n                    {/* dark/light mode */}\r\n\r\n                    {/* <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                    </div> */}\r\n\r\n                    {/* toggle mode */}\r\n\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={()=>{props.toggleMode(null)}} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Toggle Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n        </>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title : PropTypes.string.isRequired,\r\n    aboutname : PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title : 'title_name',\r\n    aboutname : 'about_name'\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextField(props) {\r\n\r\n    const [text, setText] = useState('');\r\n    const upClickHandler = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase!\", \"success\")\r\n    }\r\n    const changeHandler = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n    const loClickHandler = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase!\", \"success\")\r\n    }\r\n    const clClickHandler = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text cleared!\", \"success\")\r\n    }\r\n    const coClickHandler = () => {\r\n        // var text = document.getElementById(\"textbox\");\r\n        // text.select();\r\n        // navigator.clipboard.writeText(text.value);\r\n        // document.getSelection().removeAllRanges();\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Text copied to clipboard!\", \"success\")\r\n    }\r\n    const rsClickHandler = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(' '));\r\n        props.showAlert(\"Removed extra spaces!\", \"success\")\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{color: props.mode==='light'?'black':'white'}}>\r\n                <h1 className=\"my-4\">{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" id=\"textbox\" style={{backgroundColor: props.mode==='light'?'white':'#13466e', color: props.mode==='light'?'black':'white'}} rows=\"8\" value={text} onChange={changeHandler}></textarea>\r\n                </div>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={upClickHandler}>Convert to Uppercase</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={loClickHandler}>Convert to Lowercase</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={rsClickHandler}>Remove Extra Spaces</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={coClickHandler}>Copy to Clipboard</button>\r\n                <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={clClickHandler}>Clear Text</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color: props.mode==='light'?'black':'white'}}>\r\n                <h2>Your Text Summary:</h2>\r\n                <p><b>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length}</b> Words and <b>{text.length}</b> Characters</p>\r\n                <p><b>{0.008 * text.split(/\\s+/).filter((element)=>{return element.length!==0}).length}</b> Minutes Read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:'Nothing To Preview'}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        <div style={{height: '50px'}}>\r\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n","// import React, {useState} from 'react'\r\nimport React from 'react'\r\n\r\nexport default function About(props) {\r\n\r\n    // const [myStyle, setmyStyle] = useState({\r\n    //     color: 'black',\r\n    //     backgroundColor: 'white'\r\n    // })\r\n    // const [btnText, setbtnText] = useState('Dark')\r\n\r\n    // const toggleStyle = () => {\r\n    //     if(myStyle.color === 'white'){\r\n    //         setmyStyle({\r\n    //             color: 'black',\r\n    //             backgroundColor: 'white'\r\n    //         })\r\n    //         setbtnText('Dark')\r\n    //     }else{\r\n    //         setmyStyle({\r\n    //             color: 'white',\r\n    //             backgroundColor: 'black',\r\n    //             border: '1px solid white'\r\n    //         })\r\n    //         setbtnText('Light')\r\n    //     }\r\n        \r\n    // }\r\n\r\n    let myStyle = {\r\n        color: props.mode === 'dark'?'white':'black',\r\n        backgroundColor: props.mode === 'dark'?'#13466e':'white',\r\n        border: props.mode === 'dark'?'1px solid white':null\r\n        // borderColor: props.mode === 'dark'?'white':'black',\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <h1 className=\"my-3\" style={{color: props.mode === 'dark'?'white':'black'}}>About US</h1>\r\n                <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                        <strong>What Is TextCalci ?</strong>\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>TextCalci</strong> gives you a way to analyze your text quickly and efficiently. \r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                        <strong>How It Works ?</strong>\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        It takes your text as input and gives you word and character count with its reading time. You can formate your text and Convert\r\n                        it to uppercase and lowercase. You can also copy the text to clipboard and can clear the text. Yow can preview your text in Preview section. \r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                        <strong>Why I Did This Project ?</strong>\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        I strted to revise my React concepts and then come through this project so that I can use those concepts to real world problem. Credit goes to Code With Harry.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n                {/* <div className=\"container my-3\">\r\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={toggleStyle}>Enable {btnText} Mode</button>\r\n                </div> */}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from './Components/Navbar';\nimport TextField from './Components/TextField';\nimport React, { useState } from 'react'\nimport Alert from './Components/Alert';\nimport { BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport About from './Components/About';\n\nfunction App() {\n\n  const [mode, setMode] = useState('light')\n\n  //light-dark mode\n  // const toggleMode = () => {\n  //   if(mode === 'light'){\n  //     setMode('dark');\n  //     document.body.style.backgroundColor = '#000a44';\n  //     showAlert(\"Dark mode has been enabled\", \"success\");\n  //     // document.title = 'TextCalci - Dark Mode';\n  //   }else{\n  //     setMode('light');\n  //     document.body.style.backgroundColor = 'white';\n  //     showAlert(\"Light mode has been enabled\", \"success\");\n  //     // document.title = 'TextCalci - Light Mode';\n  //   }\n  // }\n\n  //Toggle Mode\n  const toggleMode = (cls) => {\n    removeBodyClasses();\n    document.body.classList.add('bg-'+cls);\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#000a44';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      // document.title = 'TextCalci - Dark Mode';\n    }else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      // document.title = 'TextCalci - Light Mode';\n    }\n  }\n\n  const removeBodyClasses = () => {\n    document.body.classList.remove('bg-light');\n    document.body.classList.remove('bg-dark');\n    document.body.classList.remove('bg-success');\n    document.body.classList.remove('bg-danger');\n    document.body.classList.remove('bg-warning');\n    document.body.classList.remove('bg-primary');\n  }\n\n  const [alert, setAlert] = useState(null)\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  return (\n    <>\n        <Router>\n        <Navbar title=\"TextCalci\" aboutname=\"About\" mode={mode} toggleMode={toggleMode}/>\n        <Alert alert={alert}/>\n        <div className=\"container my-3\">\n          <Switch>\n            <Route exact path=\"/about\">\n              <About mode={mode}/>\n            </Route>\n            <Route exact path=\"/\">\n            <TextField showAlert={showAlert} heading=\"Please Enter Your Text Here\" mode={mode}/>\n            </Route>\n          </Switch>\n        </div>\n        </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}